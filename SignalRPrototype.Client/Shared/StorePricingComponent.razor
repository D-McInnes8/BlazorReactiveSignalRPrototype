@using SignalRPrototype.Shared.Models
@using SignalRPrototype.Client.Services
@using SignalRPrototype.Client.Services.Implementations
@using SignalRPrototype.Shared.Models.Payload
@inject HttpClient Http
@inject ISignalRClient SignalRClient
@inject NavigationManager Navigation
@implements IAsyncDisposable

@if (_productPrices == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="_productPrices" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Guid, ProductPrice>, object>(x=>x.Value.TimeGenerated)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<KeyValuePair<Guid, ProductPrice>, object>(x=>GetProductNameFromId(x.Value.ProductId))">Product</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Guid, ProductPrice>, object>(x=>x.Value.Price!)">Price</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">
                @context.Value.TimeGenerated
                @if (context.Value.ProductId == _lastUpdatedProduct)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" />
                }
            </MudTd>
            <MudTd DataLabel="Product">@_products.Single(p => p.ProductId == context.Value.ProductId).Name</MudTd>
            <MudTd DataLabel="Price">$@context.Value.Price.ToString("##########.00")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter] public Guid StoreId { get; init; }
    
    private SignalRObservable<ProductPrice>? _subscription;
    private IDisposable? _subscriptionDisposable;
    private Guid? _lastUpdatedProduct;
    
    private Dictionary<Guid, ProductPrice> _productPrices;
    private IEnumerable<Product> _products;

    public StorePricingComponent()
    {
        _productPrices = new Dictionary<Guid, ProductPrice>();
        _products = Enumerable.Empty<Product>();
    }

    protected override async Task OnInitializedAsync()
    {
        _products = await Http.GetFromJsonAsync<IEnumerable<Product>>("api/Product/GetProducts") ?? throw new InvalidOperationException();
        
        await SignalRClient.OpenConnectionAsync(Navigation.ToAbsoluteUri("/hub"));
        (_subscription, var currentPrices) = await SignalRClient.CreatePricingObservable(new RefreshPricesPayload(StoreId, true));
        
        _productPrices = currentPrices
            .ToDictionary(p => p.ProductId);
        
        _subscriptionDisposable = _subscription.Subscribe(p =>
        {
            _lastUpdatedProduct = p.ProductId;
            _productPrices[p.ProductId] = p;
            InvokeAsync(StateHasChanged);
        });
    }
    
    private string GetProductNameFromId(Guid productId) => 
        _products.Single(p => p.ProductId == productId).Name;
    
    public async ValueTask DisposeAsync()
    {
        _subscriptionDisposable?.Dispose();
        await SignalRClient.CloseConnectionAsync();
    }
}